{"version":3,"sources":["scripts/main.js"],"names":["copyBoard","page","document","documentElement","messageLose","querySelector","messageWin","messageStart","buttonStartRestart","gameScore","fieldRows","querySelectorAll","board","sizeOfBoard","score","isWin","reset","classList","contains","add","move","ev","key","moveLeft","moveRight","moveUp","moveDown","r","c","addNumber","render","remove","possibleToMove","removeEventListener","addEventListener","textContent","replace","checkRows","isDuplicate","forEach","row","some","cell","i","checkColumns","col","rowReverse","map","reverse","movingBoard","el","findEmptyCell","emptyCells","rI","cI","push","Math","floor","random","length","randomX","randomY","newRow","filter","splice","concat","Array","fill","elem","children","className"],"mappings":"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","file":"main.b707331a.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst page = document.documentElement;\n\nconst messageLose = page.querySelector('.message-lose');\nconst messageWin = page.querySelector('.message-win');\nconst messageStart = page.querySelector('.message-start');\nconst buttonStartRestart = page.querySelector('.button');\nconst gameScore = page.querySelector('.game-score');\nconst fieldRows = page.querySelectorAll('.field-row');\n\nlet board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\nlet copyBoard;\n\nconst sizeOfBoard = 4;\nlet score = 0;\nlet isWin = false;\n\nconst reset = () => {\n  score = 0;\n\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  if (!messageWin.classList.contains('hidden')) {\n    messageWin.classList.add('hidden');\n  };\n\n  if (!messageLose.classList.contains('hidden')) {\n    messageLose.classList.add('hidden');\n  }\n};\n\nconst move = (ev) => {\n  copyBoard = [...board];\n\n  switch (ev.key) {\n    case 'ArrowLeft':\n      moveLeft(copyBoard);\n      break;\n\n    case 'ArrowRight':\n      moveRight(copyBoard);\n      break;\n\n    case 'ArrowUp':\n      moveUp(copyBoard);\n      break;\n\n    case 'ArrowDown':\n      moveDown(copyBoard);\n      break;\n\n    default:\n      return;\n  };\n\n  for (let r = 0; r < sizeOfBoard; r++) {\n    for (let c = 0; c < sizeOfBoard; c++) {\n      if (copyBoard[r][c] !== board[r][c]) {\n        board = copyBoard;\n        addNumber();\n        render();\n      }\n    }\n  };\n\n  if (isWin) {\n    messageWin.classList.remove('hidden');\n  };\n\n  if (!possibleToMove()) {\n    messageLose.classList.remove('hidden');\n    page.removeEventListener('click', move);\n  };\n};\n\nbuttonStartRestart.addEventListener('click', () => {\n  page.addEventListener('keydown', move);\n\n  if (buttonStartRestart.classList.contains('start')) {\n    buttonStartRestart.textContent = 'Restart';\n    buttonStartRestart.classList.replace('start', 'restart');\n    messageStart.classList.add('hidden');\n  } else {\n    isWin = false;\n    reset();\n  }\n\n  addNumber();\n  addNumber();\n  render();\n});\n\nconst checkRows = () => {\n  let isDuplicate = false;\n\n  copyBoard.forEach(row => {\n    if (row.some((cell, i) => cell === 0 || cell === row[i + 1])) {\n      isDuplicate = true;\n    }\n  });\n\n  return isDuplicate;\n};\n\nconst checkColumns = () => {\n  let isDuplicate = false;\n\n  copyBoard.forEach(col => {\n    col.forEach((cell, i) => {\n      if (cell === col[i + 1]) {\n        isDuplicate = true;\n      }\n    });\n  });\n\n  return isDuplicate;\n};\n\nconst rowReverse = () => {\n  copyBoard.map(row => row.reverse());\n};\n\nconst movingBoard = () => {\n  copyBoard = copyBoard[0].map((el, i) =>\n    copyBoard.map(row => row[i]),\n  );\n};\n\nconst findEmptyCell = () => {\n  const emptyCells = [];\n\n  board.forEach((row, rI) => {\n    row.forEach((cell, cI) => {\n      if (cell === 0) {\n        emptyCells.push([rI, cI]);\n      }\n    });\n  });\n\n  return emptyCells[Math.floor(Math.random() * emptyCells.length)];\n};\n\nconst possibleToMove = () => {\n  if (checkRows()) {\n    return true;\n  }\n\n  movingBoard();\n\n  return checkColumns();\n};\n\nconst addNumber = () => {\n  const [randomX, randomY] = findEmptyCell();\n\n  board[randomX][randomY] = Math.random() < 0.9 ? 2 : 4;\n};\n\nconst moveLeft = () => {\n  if (!checkRows) {\n    return;\n  }\n\n  copyBoard = copyBoard.map((row) => {\n    const newRow = row.filter(cell => cell !== 0);\n\n    newRow.forEach((cell, i) => {\n      if (cell === newRow[i + 1]) {\n        newRow[i] *= 2;\n        newRow.splice(i + 1, 1);\n        score += newRow[i];\n\n        if (newRow[i] === 2048) {\n          isWin = true;\n        }\n      }\n    });\n\n    return newRow.concat(Array(sizeOfBoard - newRow.length).fill(0));\n  });\n};\n\nconst moveRight = () => {\n  if (!checkRows) {\n    return;\n  }\n\n  moveLeft();\n  rowReverse();\n  moveLeft();\n  rowReverse();\n};\n\nconst moveUp = () => {\n  movingBoard();\n  moveLeft();\n  movingBoard();\n};\n\nconst moveDown = () => {\n  movingBoard();\n  moveRight();\n  movingBoard();\n};\n\nconst render = () => {\n  board.forEach((row, rI) => {\n    row.forEach((cell, cI) => {\n      const elem = fieldRows[rI].children[cI];\n\n      if (cell === 0) {\n        elem.textContent = '';\n        elem.className = 'field-cell';\n      } else {\n        elem.textContent = cell;\n        elem.className = `field-cell field-cell--${cell}`;\n      }\n    });\n  });\n\n  gameScore.textContent = score;\n};\n"]}